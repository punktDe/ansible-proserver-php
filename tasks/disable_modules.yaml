---
- name: Ensure PHP CLI modules directory exists
  ansible.builtin.file:
    path: "{{ php.scandir.php_ini_scan_dir_cli }}"
    state: directory
    owner: root
    mode: "0755"
  register: php_cli_scan_dir_copied

- name: Find all default scan dir files
  ansible.builtin.find:
    paths: "{{ php.scandir.php_ini_scan_dir_default }}"
    patterns: "*.ini"
    file_type: file
  register: php_default_scan_dir_files_list
  when: php_cli_scan_dir_copied is changed

- name: Copy all default scan dir files to CLI scan dir (only on first creation)
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ php.scandir.php_ini_scan_dir_cli }}/{{ item.path | basename }}"
    owner: root
    mode: "0644"
    remote_src: true
  when: php_default_scan_dir_files_list is defined and php_default_scan_dir_files_list.files is defined
  loop: "{{ php_default_scan_dir_files_list.files }}"
  loop_control:
    label: "{{ item.path }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Check non-CLI module ini files
  ansible.builtin.stat:
    path: "{{ php.scandir.php_ini_scan_dir_default }}/{{ item.key }}.ini"
  register: non_cli_stats
  loop: "{{ php.scandir.php_modules_disable | default([], true) }}"
  loop_control:
    label: "{{ item.key }}"

- name: Disable non-CLI PHP modules by renaming to .ini.off
  ansible.builtin.command:
    argv: ["/bin/mv", "{{ php.scandir.php_ini_scan_dir_default }}/{{ item.item.key }}.ini", "{{ php.scandir.php_ini_scan_dir_default }}/{{ item.item.key }}.ini.off"]
    creates: "{{ php.scandir.php_ini_scan_dir_default }}/{{ item.item.key }}.ini.off"
  loop: "{{ non_cli_stats.results | default([]) }}"
  loop_control:
    label: "{{ item.item.key }}"
  when: item.stat.exists | default(false)

- name: Check CLI module ini files
  ansible.builtin.stat:
    path: "{{ php.scandir.php_ini_scan_dir_cli }}/{{ (item.key | default(item)) }}.ini"
  register: cli_stats
  vars:
    cli_items: "{{ php.scandir.php_cli_modules_disable | default([], true) }}"
  loop: "{{ cli_items }}"
  loop_control:
    label: "{{ (item.key | default(item)) }}"

- name: Disable CLI PHP modules by renaming to .ini.off
  ansible.builtin.command:
    creates: "{{ php.scandir.php_ini_scan_dir_cli }}/{{ (item.item.key | default(item.item)) }}.ini.off"
    argv: ["/bin/mv", "{{ php.scandir.php_ini_scan_dir_cli }}/{{ (item.item.key | default(item.item)) }}.ini", "{{ php.scandir.php_ini_scan_dir_cli }}/{{ (item.item.key | default(item.item)) }}.ini.off"]
  loop: "{{ cli_stats.results | default([]) }}"
  loop_control:
    label: "{{ (item.item.key | default(item.item)) }}"
  when: item.stat.exists | default(false)

- name: Init getent database
  ansible.builtin.getent:
    database: passwd

- name: Ensure PHP_INI_SCAN_DIR line exists in shell rc files (sh-compatible)
  ansible.builtin.lineinfile:
    path: "{{ getent_passwd[item.0][4] }}/{{ item.1 }}"
    create: true
    line: "export PHP_INI_SCAN_DIR={{ php.scandir.php_ini_scan_dir_cli }}"
    regexp: '^\s*(export\s+)?PHP_INI_SCAN_DIR='
    state: present
    mode: "0644"
    owner: "{{ item.0 }}"
  loop: "{{ php.scandir.overwrite_scandir_for_cli_user | product(['.bashrc', '.shrc', '.profile']) | list }}"
  loop_control:
    label: "{{ item.0 }} -> {{ item.1 }}"
  when: php.scandir.overwrite_scandir_for_cli_user | length > 0

- name: Ensure PHP_INI_SCAN_DIR line exists in csh rc file
  ansible.builtin.lineinfile:
    path: "{{ getent_passwd[item][4] }}/.cshrc"
    create: true
    line: "setenv PHP_INI_SCAN_DIR {{ php.scandir.php_ini_scan_dir_cli }}"
    regexp: '^\s*setenv\s+PHP_INI_SCAN_DIR\s+'
    state: present
    mode: "0644"
    owner: "{{ item }}"
  loop: "{{ php.scandir.overwrite_scandir_for_cli_user }}"
  loop_control:
    label: "{{ item }}"
  when: php.scandir.overwrite_scandir_for_cli_user | length > 0
